// Generated by CoffeeScript 2.3.2
(function() {
  /*
  TabCarousel
  ===========

  A Chrome extension to automatically cycle through tabs.

  Licensed under the GPL v2.  Source code is available at https://github.com/benjaminoakes/TabCarousel

  @seealso http://code.google.com/chrome/extensions/background_pages.html
  @author Benjamin Oakes <hello@benjaminoakes.com>, @benjaminoakes
  */
  'use strict';
  var BackgroundController, Carousel, Options, OptionsController, TabCarousel, carousel, localStorage, ns, options, root;

  if (typeof require !== "undefined" && require !== null) {
    localStorage = require('localStorage');
  } else {
    localStorage = window.localStorage;
  }

  TabCarousel = {};

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.TabCarousel = TabCarousel;

  ns = TabCarousel;

  Options = class Options {
    // Accessor for first run timestamp.
    firstRun(value) {
      if (value) {
        return localStorage.firstRun = value;
      } else {
        return !localStorage.firstRun;
      }
    }

    
    // Accessor for user set flip wait timing or the default.
    flipWait_ms(ms) {
      if (ms) {
        return localStorage.flipWait_ms = ms;
      } else {
        return localStorage.flipWait_ms || Options.defaults.flipWait_ms;
      }
    }

    
    // Accessor for user set automatic start preference.
    automaticStart(value) {
      if (1 === arguments.length) {
        return localStorage.automaticStart = !!value;
      } else {
        if (localStorage.automaticStart) {
          return JSON.parse(localStorage.automaticStart);
        }
      }
    }

  };

  // @constant
  Options.defaults = {
    // Interval between tabs, in ms.
    flipWait_ms: 15 * 1000,
    // Interval between reloading a tab, in ms.  Let's not kill other people's servers with automated requests.
    reloadWait_ms: 5 * 60 * 1000
  };

  root.Options = Options;

  options = new Options;

  OptionsController = class OptionsController {
    constructor(form) {
      this.form = form;
      this.form.flipWait_ms.value = options.flipWait_ms();
      this.form.automaticStart.checked = options.automaticStart();
      this.form.onsubmit = this.onsubmit;
    }

    // Save callback for Options form.  Keep in mind "this" is the form, not the controller.
    onsubmit() {
      var status;
      status = document.getElementById('status');
      status.innerHTML = '';
      options.flipWait_ms(this.flipWait_ms.value);
      options.automaticStart(this.automaticStart.value);
      // So the user sees a blink when saving values multiple times without leaving the page.
      setTimeout(function() {
        status.innerHTML = 'Saved';
        return status.style.color = 'green';
      }, 100);
      return false;
    }

  };

  ns.OptionsController = OptionsController;

  Carousel = class Carousel {
    constructor() {
      // Keep track of the last time a tab was refreshed so we can wait at least 5 minutes betweent refreshes.
      this.lastReloads_ms = {};
    }

    
    // Reload the given tab, if it has been more than reloadWait_ms ago since it's last been reloaded.
    reload(tabId) {
      var lastReload_ms, now_ms;
      now_ms = Date.now();
      lastReload_ms = this.lastReloads_ms[tabId];
      if (!lastReload_ms || (now_ms - lastReload_ms >= Options.defaults.reloadWait_ms)) {
        // If a tab fails reloading, the host shows up as chrome://chromewebdata/
        // Protocol chrome:// URLs can't be reloaded through script injection, but you can simulate a reload using tabs.update.
        chrome.tabs.get(tabId, (t) => {
          return chrome.tabs.update(tabId, {
            url: t.url
          });
        });
        return this.lastReloads_ms[tabId] = now_ms;
      }
    }

    
    // Select the given tab count, mod the number of tabs currently open.

    // @seealso http://code.google.com/chrome/extensions/tabs.html
    // @seealso http://code.google.com/chrome/extensions/content_scripts.html#pi
    select(windowId, count) {
      return chrome.tabs.getAllInWindow(windowId, (tabs) => {
        var nextTab, tab;
        tab = tabs[count % tabs.length];
        nextTab = tabs[(count + 1) % tabs.length];
        chrome.tabs.update(tab.id, {
          selected: true
        });
        return this.reload(nextTab.id);
      });
    }

    
    // Put the carousel into motion.
    start(ms) {
      var continuation, count, windowId;
      count = 0;
      windowId = void 0; // window in which TabCarousel was started
      if (!ms) {
        ms = options.flipWait_ms();
      }
      chrome.windows.getCurrent((w) => {
        return windowId = w.id;
      });
      chrome.browserAction.setIcon({
        path: 'images/icon_32_exp_1.75_stop_emblem.png'
      });
      chrome.browserAction.setTitle({
        title: 'Stop Carousel'
      });
      continuation = () => {
        this.select(windowId, count);
        count += 1;
        return this.lastTimeout = setTimeout(continuation, ms);
      };
      return continuation();
    }

    
    // Is the carousel in motion?
    running() {
      return !!this.lastTimeout;
    }

    
    // Stop the carousel.
    stop() {
      clearTimeout(this.lastTimeout);
      this.lastTimeout = void 0;
      chrome.browserAction.setIcon({
        path: 'images/icon_32.png'
      });
      return chrome.browserAction.setTitle({
        title: 'Start Carousel'
      });
    }

  };

  carousel = new Carousel;

  BackgroundController = (function() {
    class BackgroundController {
      constructor() {
        
        // Chrome browser action (toolbar button) click handler.
        this.click = this.click.bind(this);
      }

      
      // Display the first-run tutorial.
      tutorial() {
        window.alert(this.tutorialText);
        return options.firstRun(Date.now());
      }

      click() {
        if (options.firstRun()) {
          this.tutorial();
        }
        if (!carousel.running()) {
          return carousel.start();
        } else {
          return carousel.stop();
        }
      }

      
      // Background page onLoad handler.
      load() {
        chrome.browserAction.onClicked.addListener(this.click);
        chrome.browserAction.setTitle({
          title: 'Start Carousel'
        });
        if (options.automaticStart()) {
          return carousel.start();
        }
      }

    };

    // English-language tutorial text for first run.
    // @constant
    BackgroundController.prototype.tutorialText = `First-Use Tutorial\n  \nTabCarousel is simple:  open tabs you want to monitor throughout the day, then click the toolbar icon.  To stop, click the icon again.\n  \nBy default, TabCarousel will flip through your tabs every ${String(Options.defaults.flipWait_ms / 1000)} s, reloading them every ${String(Options.defaults.reloadWait_ms / 1000 / 60)} min.  It's great on a unused display or TV.  Put Chrome in full-screen mode (F11, or cmd-shift-f on the Mac) and let it go.\n  \nIf you want to change how often TabCarousel flips through your tabs, right click on the toolbar icon and choose "Options".`;

    return BackgroundController;

  }).call(this);

  ns.BackgroundController = BackgroundController;

}).call(this);
